* tree-sitter-wgsl

#+HTML: <img src="./assets/webgpu.svg" align="right" width="30%">

[[https://www.w3.org/TR/2024/WD-WGSL-20240205/][WebGPU Shading Language WD-WGSL-20240205]] grammar for [[https://tree-sitter.github.io/tree-sitter/][tree-sitter]].

inspired and guided by [[https://github.com/szebniok/tree-sitter-wgsl][szebniok/tree-sitter-wgsl]] and [[https://github.com/tree-sitter/tree-sitter-rust][tree-sitter-rust]].

** About

At first, what is WGSL, and what is tree-sitter?

#+BEGIN_QUOTE
WebGPU Shading Language (WGSL) is the shader language for
[WebGPU]. That is, an application using the WebGPU API uses WGSL to
express the programs, known as shaders, that run on the GPU.

[[https://www.w3.org/TR/WGSL/#intro][Introduction | WebGPU Shading Language]]

Tree-sitter is a parser generator tool and an incremental parsing
library. It can build a concrete syntax tree for a source file and
efficiently update the syntax tree as the source file is edited.

[[https://tree-sitter.github.io/tree-sitter/][Introduction | Tree-sitter]]
#+END_QUOTE

The goal of this repo is to provide a grammar for WGSL that would
enable tree-sitter to efficiently build a concrete syntax tree for a
source file. The generated parser can then be used with emacs's
builtin [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Parsing-Program-Source.html][treesit]] support to provide better major mode experience and
more convenient emacs addons development experience.

Currently this grammar is not mature enough, ToDo list below shows
things need to be done.

** Get and Use

To use this grammar, you first need to download it from github:

#+BEGIN_SRC text
git clone https://github.com/include-yy/tree-sitter-wgsl --depth 1
#+END_SRC

If you want to do further development, node.js should be installed,
run the npm commands below to download necessary devtools:

#+BEGIN_SRC text
npm i
#+END_SRC

You can use =npx= to activate dev environment, and then use
=tree-sitter= command to generate and test grammar. See [[https://tree-sitter.github.io/tree-sitter/creating-parsers][Creating parsers]]
for more information.

If you just want to use the existing parser, you can compile like this
in =src= directory:

#+BEGIN_SRC text
  gcc -fPIC -c -I. parser.c
  gcc -fPIC -c -I. scanner.c
  gcc -fPIC -shared *.o -o "libtree-sitter-wgsl.so"
  # with MSYS2 on Windows
  gcc -fPIC -shared *.o -o "libtree-sitter-wgsl.dll"
#+END_SRC

** Development

issue and pr are welcomed. Whether it's correcting mistakes,
synchronizing with the latest standards, or pointing out errors in the
grammar, all are acceptable. If you wish to submit a pull request,
please make sure it passes all tests under test/corpus (of course, you
may modify the test files as needed).

Here are some learning materials about writing grammars:

- [[https://tree-sitter.github.io/tree-sitter/][Tree-sitter official documentation]]
- [[https://github.com/tree-sitter/tree-sitter/wiki/Tips-and-Tricks-for-a-grammar-author][Tips and Tricks for a grammar author]]
- [[https://github.com/sogaiu/ts-questions][sogaiu/ts-questions: Tree-sitter Questions]]
- repo's [[https://github.com/tree-sitter/tree-sitter/issues][issues]], [[https://github.com/tree-sitter/tree-sitter/pulls][pulls]] and [[https://github.com/tree-sitter/tree-sitter/discussions][discussions]]
- [[https://docs.rs/tree-sitter/0.20.10/tree_sitter/][tree_sitter - Rust]]

Also something from emacs side:

- [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Parsing-Program-Source.html][Parsing Program Source(GNU Emacs Lisp Reference Manual)]]
- [[https://github.com/emacs-mirror/emacs/blob/master/admin/notes/tree-sitter/starter-guide][emacs/admin/notes/tree-sitter/starter-guide]]

** ToDo List

Finished:

- [X] add basic test files for grammar
- [X] rename some unconvenient name
- [X] use code in WGSL's spec as example

TODO:

- [ ] provide fully covered test
- [ ] add more examples
- [ ] add hightlight.scm (but I am not a nvim user)
- [ ] improve parser's state count and parser's size
